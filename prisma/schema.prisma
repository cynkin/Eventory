generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more seats.
model users {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email           String            @unique @db.VarChar(255)
  password        String?
  name            String?           @db.VarChar(100)
  role            String            @db.VarChar(20)
  balance         Decimal?          @default(1000) @db.Decimal
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  google_id       String?
  concert_tickets concert_tickets[]
  concerts        concerts[]
  contact         contact?
  movies          movies[]
  theatres        theatres[]
  tickets         tickets[]
  train_tickets   train_tickets[]
  trains          trains[]
}

model contact {
  id              String  @id @db.Uuid
  bio             String?
  gender          String?
  date_of_birth   String?
  mobile_no       String?
  emergency_email String?
  address         String?
  profile_pic     String?
  user            users   @relation(fields: [id], references: [id])
}

model movies {
  id          String     @id @default(uuid()) @db.Uuid
  title       String     @unique
  description String
  ageRating   String
  genres      String[]
  image       String
  duration    Int
  commission  Float
  vendor_id   String     @db.Uuid
  createdAt   DateTime   @default(now())
  vendor      users      @relation(fields: [vendor_id], references: [id])
  shows       shows[]
  theatres    theatres[]
}

model theatres {
  id         String  @id @default(uuid()) @db.Uuid
  location   String
  seatLayout Json
  vendor_id  String  @db.Uuid
  movie_id   String  @db.Uuid
  shows      shows[]
  movie      movies  @relation(fields: [movie_id], references: [id])
  vendor     users   @relation(fields: [vendor_id], references: [id])
}

model shows {
  id           String    @id @default(uuid()) @db.Uuid
  date         String
  time         String
  language     String
  seats        Json
  cost         Float
  premium_cost Float
  theatre_id   String    @db.Uuid
  movie_id     String    @db.Uuid
  movie        movies    @relation(fields: [movie_id], references: [id])
  theatre      theatres  @relation(fields: [theatre_id], references: [id])
  tickets      tickets[]
}

model trains {
  id            String          @id @default(uuid()) @db.Uuid
  title         String
  train_id      Int
  compartments  Int
  additional    Float
  stations      Json
  seatLayout    Json
  vendor_id     String          @db.Uuid
  createdAt     DateTime        @default(now())
  train_tickets train_tickets[]
  vendor        users           @relation(fields: [vendor_id], references: [id])
}

model stations {
  id   Int    @id @default(autoincrement())
  name String
  code String
}

model concerts {
  id            String          @id @default(uuid()) @db.Uuid
  title         String          @unique
  description   String
  ageRating     String
  seats         Int
  cost          Float
  duration      Int
  languages     String[]
  genres        String[]
  image         String
  start_date    String
  end_date      String
  vendor_id     String          @db.Uuid
  createdAt     DateTime        @default(now())
  concert_shows concert_shows[]
  vendor        users           @relation(fields: [vendor_id], references: [id])
}

model concert_shows {
  id              String            @id @default(uuid()) @db.Uuid
  date            String
  time            String
  location        String
  seats           Int
  concert_id      String            @db.Uuid
  concert         concerts          @relation(fields: [concert_id], references: [id])
  concert_tickets concert_tickets[]
}

model tickets {
  id      String   @id @default(uuid())
  amount  Float
  seats   String[]
  status  String?  @default("verified")
  user_id String   @db.Uuid
  show_id String   @db.Uuid
  show    shows    @relation(fields: [show_id], references: [id])
  user    users    @relation(fields: [user_id], references: [id])
}

model concert_tickets {
  id              String        @id @default(uuid())
  amount          Float
  seats           Int
  user_id         String        @db.Uuid
  concert_show_id String        @db.Uuid
  concert_show    concert_shows @relation(fields: [concert_show_id], references: [id])
  user            users         @relation(fields: [user_id], references: [id])
}

model train_tickets {
  id           String   @id @default(uuid())
  amount       Float
  seats        String[]
  passengers   Json
  from_station Json
  to_station   Json
  user_id      String   @db.Uuid
  train_id     String   @db.Uuid
  train        trains   @relation(fields: [train_id], references: [id])
  user         users    @relation(fields: [user_id], references: [id])
}

model SeatHold {
  id        String   @id
  seatCode  String
  slotId    String
  userId    String
  createdAt DateTime @default(now())

  @@unique([seatCode, slotId])
}
